package com.studentresult.controller;

import com.studentresult.entity.Student;
import com.studentresult.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController // Indicates that this controller handles RESTful requests
@RequestMapping("/students") // Base URL path for all endpoints in this controller
@CrossOrigin(origins = "*") // Allows cross-origin requests from any domain (for development, restrict in production)
public class StudentController {

    @Autowired // Injects the StudentRepository to interact with the database
    private StudentRepository studentRepository;

    /**
     * Retrieves a list of all students.
     * Accessible via GET request to /students
     * @return List of Student objects
     */
    @GetMapping
    public List<Student> getAllStudents() {
        return studentRepository.findAll();
    }

    /**
     * Creates a new student record.
     * Accessible via POST request to /students with a JSON request body.
     * @param student The Student object to be created (from request body).
     * @return The saved Student object with its generated ID.
     */
    @PostMapping
    public Student createStudent(@RequestBody Student student) {
        // When creating, the ID is typically null and will be generated by the database.
        // All fields from the incoming 'student' object will be saved.
        return studentRepository.save(student);
    }

    /**
     * Retrieves a single student by their ID.
     * Accessible via GET request to /students/{id}
     * @param id The ID of the student to retrieve.
     * @return The Student object if found, otherwise null.
     */
    @GetMapping("/{id}")
    public Student getStudentById(@PathVariable Long id) {
        return studentRepository.findById(id).orElse(null);
    }

    /**
     * Updates an existing student record.
     * Accessible via PUT request to /students/{id} with a JSON request body.
     * @param id The ID of the student to update.
     * @param updatedStudent The Student object containing the updated fields (from request body).
     * @return The updated Student object if found, otherwise null.
     */
    @PutMapping("/{id}")
    public Student updateStudent(@PathVariable Long id, @RequestBody Student updatedStudent) {
        // Find the existing student by ID
        return studentRepository.findById(id).map(student -> {
            // Update all the relevant fields from the incoming updatedStudent object
            student.setName(updatedStudent.getName());
            student.setUniversityRollNumber(updatedStudent.getUniversityRollNumber());
            student.setSemester(updatedStudent.getSemester());
            student.setSubject1Marks(updatedStudent.getSubject1Marks());
            student.setSubject2Marks(updatedStudent.getSubject2Marks());
            student.setSubject3Marks(updatedStudent.getSubject3Marks());
            student.setSubject4Marks(updatedStudent.getSubject4Marks());
            student.setSubject5Marks(updatedStudent.getSubject5Marks());
            student.setTotalMarks(updatedStudent.getTotalMarks());
            student.setCgpa(updatedStudent.getCgpa());

            // Save the updated student back to the database
            return studentRepository.save(student);
        }).orElse(null); // Return null if the student with the given ID is not found
    }

    /**
     * Deletes a student record by ID.
     * Accessible via DELETE request to /students/{id}.
     * @param id The ID of the student to delete.
     * @return A message indicating success or if the student was not found.
     */
    @DeleteMapping("/{id}")
    public String deleteStudent(@PathVariable Long id) {
        if (studentRepository.existsById(id)) {
            studentRepository.deleteById(id);
            return "Student deleted with id: " + id;
        } else {
            return "Student not found with id: " + id;
        }
    }
}
